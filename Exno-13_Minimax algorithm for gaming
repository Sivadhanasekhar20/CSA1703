print("192311318-G siva dhana sekhar")
def print_board(b):
    for r in b: print(' | '.join(r)); print('-'*5)

def winner(b, p):
    return any(all(b[i][j] == p for j in range(3)) or
               all(b[j][i] == p for j in range(3)) for i in range(3)) or \
           all(b[i][i] == p for i in range(3)) or \
           all(b[i][2-i] == p for i in range(3))

def minimax(b, is_max):
    if winner(b, 'O'): return 1
    if winner(b, 'X'): return -1
    if all(c != ' ' for r in b for c in r): return 0

    best = -2 if is_max else 2
    for i in range(3):
        for j in range(3):
            if b[i][j] == ' ':
                b[i][j] = 'O' if is_max else 'X'
                score = minimax(b, not is_max)
                b[i][j] = ' '
                best = max(best, score) if is_max else min(best, score)
    return best

def best_move(b):
    move, best = None, -2
    for i in range(3):
        for j in range(3):
            if b[i][j] == ' ':
                b[i][j] = 'O'
                score = minimax(b, False)
                b[i][j] = ' '
                if score > best:
                    best, move = score, (i, j)
    return move

def play():
    board = [[' ']*3 for _ in range(3)]
    while True:
        print_board(board)
        r, c = map(int, input("Enter row and col (0-2): ").split())
        if board[r][c] != ' ':
            print("Invalid! Try again.")
            continue
        board[r][c] = 'X'
        if winner(board, 'X'): print_board(board); print("You win!"); break
        if all(c != ' ' for row in board for c in row): print("Draw!"); break
        ai = best_move(board)
        if ai: board[ai[0]][ai[1]] = 'O'
        if winner(board, 'O'): print_board(board); print("AI wins!"); break

play()
