# Sample dataset: [feature1, feature2, ..., label]
dataset = [
    [1, 1, 'Yes'],
    [1, 0, 'No'],
    [0, 1, 'No'],
    [0, 0, 'No'],
    [1, 1, 'Yes']
]

# Function to calculate Gini impurity
def gini(groups, classes):
    n_instances = sum([len(group) for group in groups])
    gini_score = 0.0
    for group in groups:
        size = len(group)
        if size == 0:
            continue
        score = 0.0
        labels = [row[-1] for row in group]
        for class_val in classes:
            proportion = labels.count(class_val) / size
            score += proportion * proportion
        gini_score += (1 - score) * (size / n_instances)
    return gini_score

# Function to split dataset
def test_split(index, value, dataset):
    left, right = [], []
    for row in dataset:
        if row[index] == value:
            left.append(row)
        else:
            right.append(row)
    return left, right

# Find the best split point
def get_best_split(dataset):
    class_values = list(set(row[-1] for row in dataset))
    best_index, best_value, best_score, best_groups = None, None, float('inf'), None
    for index in range(len(dataset[0]) - 1):
        for row in dataset:
            groups = test_split(index, row[index], dataset)
            gini_score = gini(groups, class_values)
            if gini_score < best_score:
                best_index, best_value, best_score, best_groups = index, row[index], gini_score, groups
    return {'index': best_index, 'value': best_value, 'groups': best_groups}

# Make a leaf node
def to_terminal(group):
    outcomes = [row[-1] for row in group]
    return max(set(outcomes), key=outcomes.count)

# Build tree recursively
def split(node, max_depth, min_size, depth):
    left, right = node['groups']
    del node['groups']

    # No split
    if not left or not right:
        node['left'] = node['right'] = to_terminal(left + right)
        return

    # Max depth
    if depth >= max_depth:
        node['left'], node['right'] = to_terminal(left), to_terminal(right)
        return

    # Left child
    if len(left) <= min_size:
        node['left'] = to_terminal(left)
    else:
        node['left'] = get_best_split(left)
        split(node['left'], max_depth, min_size, depth + 1)

    # Right child
    if len(right) <= min_size:
        node['right'] = to_terminal(right)
    else:
        node['right'] = get_best_split(right)
        split(node['right'], max_depth, min_size, depth + 1)

# Build the decision tree
def build_tree(train, max_depth, min_size):
    root = get_best_split(train)
    split(root, max_depth, min_size, 1)
    return root

# Predict the class label
def predict(node, row):
    if row[node['index']] == node['value']:
        if isinstance(node['left'], dict):
            return predict(node['left'], row)
        else:
            return node['left']
    else:
        if isinstance(node['right'], dict):
            return predict(node['right'], row)
        else:
            return node['right']

# Print predictions
tree = build_tree(dataset, max_depth=3, min_size=1)
for row in dataset:
    prediction = predict(tree, row)
    print(f"Expected = {row[-1]}, Predicted = {prediction}")
