from collections import deque

def is_valid(m1, c1, m2, c2):
    return (0 <= m1 <= 3 and 0 <= c1 <= 3 and 0 <= m2 <= 3 and 0 <= c2 <= 3 and
           (m1 == 0 or m1 >= c1) and (m2 == 0 or m2 >= c2))

def get_successors(state):
    m1, c1, boat = state
    m2, c2 = 3 - m1, 3 - c1
    moves = [(1,0),(2,0),(0,1),(0,2),(1,1)]
    sign = -1 if boat == 0 else 1
    for dm, dc in moves:
        new_m1 = m1 + sign * dm
        new_c1 = c1 + sign * dc
        new_boat = 1 - boat
        if is_valid(new_m1, new_c1, 3-new_m1, 3-new_c1):
            yield (new_m1, new_c1, new_boat)

def solve():
    start = (3, 3, 0)
    goal = (0, 0, 1)
    queue = deque([(start, [start])])
    visited = set()
    while queue:
        state, path = queue.popleft()
        if state == goal:
            for step in path:
                print(step)
            return
        for next_state in get_successors(state):
            if next_state not in visited:
                visited.add(next_state)
                queue.append((next_state, path + [next_state]))

solve()
print("192311318-G siva dhana sekhar")
